# Create a resource
resource "aws_instance" "EC2" {
  ami                    = var.ami-id
  count                  = var.instance-count
  instance_type          = var.instance-type
  vpc_security_group_ids = var.vpc-security-group-ids
  key_name               = "AWS_EU_Key"
  // var.pem-key
  subnet_id = var.subnet-id

  tags = {
    Name = "SFIA2-${element(var.instance-tags, count.index)}"
  }
}

### The Elastic IP for the EC2
resource "aws_eip" "EIP" {
  vpc                       = true
  instance                  = aws_instance.EC2[0].id
  associate_with_private_ip = aws_instance.EC2[0].private_ip

  tags = {
    Name = "elastic-ip"
  }
}

### Generate inventory file
resource "local_file" "ansible_inventory" {
  filename = "../../../Ansible/inventory/inventory.ini"
  content  = <<EOT
[jenkins]
ubuntu@${aws_instance.EC2[0].public_dns}
[testvm]
ubuntu@${aws_instance.EC2[1].public_dns}
[K8S_CLuster]
ubuntu@${aws_instance.EC2[2].public_dns}

[all:vars]
ansible_ssh_private_file="./AWS_EU_Key.pem"
ansible_python_interpreter="/usr/bin/python3"
ansible_ssh_commom_args='-0 StrictHostChecking=no'
  EOT

  provisioner "local-exec" {
    command = <<EOT
    sleep 30;

    ansible-playbook --private-key '${var.pem-key}' -i '${local_file.ansible_inventory.filename}' ../../../Ansible/playbook.yaml
    EOT
  }
}

# Export Terraform variable values to an Ansible var_file
resource "local_file" "tf_ansible_vars" {
  content  = <<-DOC
// Ansible vars_file containing variable values from Terraform.
// Generated by Terraform mgmt configuration.

// hosts public dns - for building project
env.jenkins_user="ubuntu@${aws_instance.EC2[0].public_dns}"
env.testvm_user="ubuntu@${aws_instance.EC2[1].public_dns}"
env.K8S_CLuster_user="ubuntu@${aws_instance.EC2[2].public_dns}"

// host key generated for ssh into vms
env.EC2_private_key="${aws_instance.EC2[0].key_name}"
    DOC
  filename = "../../../Ansible/.envvars/tf_ansible.groovy"
}
